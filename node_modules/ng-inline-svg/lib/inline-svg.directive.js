"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var inline_svg_component_1 = require("./inline-svg.component");
var svg_cache_service_1 = require("./svg-cache.service");
var inline_svg_service_1 = require("./inline-svg.service");
var InlineSVGDirective = (function () {
    function InlineSVGDirective(_el, _viewContainerRef, _resolver, _svgCache, _renderer, _inlineSVGService, platformId) {
        this._el = _el;
        this._viewContainerRef = _viewContainerRef;
        this._resolver = _resolver;
        this._svgCache = _svgCache;
        this._renderer = _renderer;
        this._inlineSVGService = _inlineSVGService;
        this.platformId = platformId;
        this.replaceContents = true;
        this.prepend = false;
        this.injectComponent = false;
        this.cacheSVG = true;
        this.forceEvalStyles = false;
        this.evalScripts = 'always';
        this.onSVGInserted = new core_1.EventEmitter();
        this.onSVGFailed = new core_1.EventEmitter();
        this._ranScripts = {};
        this._supportsSVG = this._checkSVGSupport();
        if (!common_1.isPlatformServer(this.platformId) && !this._supportsSVG) {
            this._fail('Embed SVG not supported by browser');
        }
    }
    InlineSVGDirective.prototype.ngOnInit = function () {
        if (!common_1.isPlatformBrowser(this.platformId) && !common_1.isPlatformServer(this.platformId)) {
            return;
        }
        this._insertSVG();
    };
    InlineSVGDirective.prototype.ngOnChanges = function (changes) {
        if (!common_1.isPlatformBrowser(this.platformId) && !common_1.isPlatformServer(this.platformId)) {
            return;
        }
        if (changes['inlineSVG']) {
            this._insertSVG();
        }
    };
    InlineSVGDirective.prototype.ngOnDestroy = function () {
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    };
    InlineSVGDirective.prototype._insertSVG = function () {
        var _this = this;
        if (!common_1.isPlatformServer(this.platformId) && !this._supportsSVG) {
            return;
        }
        if (!this.inlineSVG) {
            this._fail('No URL passed to [inlineSVG]');
            return;
        }
        if (this.inlineSVG === this._prevUrl) {
            return;
        }
        this._prevUrl = this.inlineSVG;
        this._subscription = this._svgCache.getSVG(this.inlineSVG, this.cacheSVG)
            .subscribe(function (svg) {
            if (_this._isUrlSymbol(_this.inlineSVG)) {
                var symbolId = _this.inlineSVG.split('#')[1];
                var symbol = svg.querySelector("[id=\"" + symbolId + "\"]");
                if (!symbol) {
                    _this._fail("Symbol \"" + symbolId + "\" not found");
                    return;
                }
                var elSvg = _this._renderer.createElement('svg', 'svg');
                _this._renderer.appendChild(elSvg, symbol);
                var elSvgUse = _this._renderer.createElement('use', 'svg');
                _this._renderer.setAttribute(elSvgUse, 'href', "#" + symbolId, 'xlink');
                _this._renderer.appendChild(elSvg, elSvgUse);
                _this._processSvg(elSvg);
            }
            else {
                _this._processSvg(svg);
            }
        }, function (err) {
            _this._fail(err);
        });
    };
    InlineSVGDirective.prototype._processSvg = function (svg) {
        if (!svg) {
            return;
        }
        if (this.removeSVGAttributes) {
            this._removeAttributes(svg, this.removeSVGAttributes);
        }
        if (this.onSVGLoaded) {
            svg = this.onSVGLoaded(svg, this._el.nativeElement);
        }
        this._insertEl(svg);
        this._evalScripts(svg, this.inlineSVG);
        if (this.forceEvalStyles) {
            var styleTags = svg.querySelectorAll('style');
            Array.from(styleTags).forEach(function (tag) { return tag.textContent += ''; });
        }
        this.onSVGInserted.emit(svg);
    };
    InlineSVGDirective.prototype._insertEl = function (el) {
        if (this.injectComponent) {
            if (!this._svgComp) {
                var factory = this._resolver.resolveComponentFactory(inline_svg_component_1.InlineSVGComponent);
                this._svgComp = this._viewContainerRef.createComponent(factory);
            }
            this._svgComp.instance.context = this;
            this._svgComp.instance.replaceContents = this.replaceContents;
            this._svgComp.instance.prepend = this.prepend;
            this._svgComp.instance.content = el;
            this._renderer.appendChild(this._el.nativeElement, this._svgComp.injector.get(inline_svg_component_1.InlineSVGComponent)._el.nativeElement);
        }
        else {
            this._inlineSVGService.insertEl(this, this._el.nativeElement, el, this.replaceContents, this.prepend);
        }
    };
    InlineSVGDirective.prototype._removeAttributes = function (element, attrs) {
        if (!common_1.isPlatformBrowser(this.platformId)) {
            return;
        }
        var svgAttrs = element.attributes;
        for (var i = 0; i < svgAttrs.length; i++) {
            if (attrs.indexOf(svgAttrs[i].name.toLowerCase()) > -1) {
                element.removeAttribute(svgAttrs[i].name);
            }
        }
        var innerEls = element.getElementsByTagName('*');
        for (var i = 0; i < innerEls.length; i++) {
            this._removeAttributes(innerEls[i], attrs);
        }
    };
    InlineSVGDirective.prototype._evalScripts = function (svg, url) {
        if (!common_1.isPlatformBrowser(this.platformId)) {
            return;
        }
        var scripts = svg.querySelectorAll('script');
        var scriptsToEval = [];
        var script, scriptType;
        for (var i = 0; i < scripts.length; i++) {
            scriptType = scripts[i].getAttribute('type');
            if (!scriptType || scriptType === 'application/ecmascript' || scriptType === 'application/javascript') {
                script = scripts[i].innerText || scripts[i].textContent;
                scriptsToEval.push(script);
                this._renderer.removeChild(scripts[i].parentNode, scripts[i]);
            }
        }
        if (scriptsToEval.length > 0 && (this.evalScripts === 'always' ||
            (this.evalScripts === 'once' && !this._ranScripts[url]))) {
            for (var i = 0; i < scriptsToEval.length; i++) {
                new Function(scriptsToEval[i])(window);
            }
            this._ranScripts[url] = true;
        }
    };
    InlineSVGDirective.prototype._fail = function (msg) {
        this.onSVGFailed.emit(msg);
        if (this.fallbackImgUrl) {
            var elImg = this._renderer.createElement('IMG');
            this._renderer.setAttribute(elImg, 'src', this.fallbackImgUrl);
            this._insertEl(elImg);
        }
    };
    InlineSVGDirective.prototype._isUrlSymbol = function (url) {
        return url.charAt(0) === '#' || url.indexOf('.svg#') > -1;
    };
    InlineSVGDirective.prototype._checkSVGSupport = function () {
        return typeof SVGRect !== 'undefined';
    };
    InlineSVGDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[inlineSVG]',
                    providers: [svg_cache_service_1.SVGCacheService]
                },] },
    ];
    InlineSVGDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef },
        { type: core_1.ViewContainerRef },
        { type: core_1.ComponentFactoryResolver },
        { type: svg_cache_service_1.SVGCacheService },
        { type: core_1.Renderer2 },
        { type: inline_svg_service_1.InlineSVGService },
        { type: Object, decorators: [{ type: core_1.Inject, args: [core_1.PLATFORM_ID,] }] }
    ]; };
    InlineSVGDirective.propDecorators = {
        inlineSVG: [{ type: core_1.Input }],
        replaceContents: [{ type: core_1.Input }],
        prepend: [{ type: core_1.Input }],
        injectComponent: [{ type: core_1.Input }],
        cacheSVG: [{ type: core_1.Input }],
        removeSVGAttributes: [{ type: core_1.Input }],
        forceEvalStyles: [{ type: core_1.Input }],
        evalScripts: [{ type: core_1.Input }],
        fallbackImgUrl: [{ type: core_1.Input }],
        onSVGLoaded: [{ type: core_1.Input }],
        onSVGInserted: [{ type: core_1.Output }],
        onSVGFailed: [{ type: core_1.Output }]
    };
    return InlineSVGDirective;
}());
exports.InlineSVGDirective = InlineSVGDirective;
